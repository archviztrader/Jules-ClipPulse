generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  plan          Plan      @default(FREE)
  credits       Int       @default(3)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  referrals     Referral[]
  stripeCustomerId String?
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id              String      @id @default(cuid())
  userId          String
  title           String
  prompt          String      @db.Text
  engine          String
  voice           String?
  status          VideoStatus @default(PENDING)
  progress        Int         @default(0)
  originalUrl     String?
  videoUrl        String?
  thumbnailUrl    String?
  duration        Int?        // in seconds
  watermarked     Boolean     @default(true)
  watermarkRemoved Boolean    @default(false)
  youtubeId       String?
  youtubeTitle    String?
  youtubeDescription String?  @db.Text
  youtubeTags     String[]
  youtubePrivacy  String?
  creditsUsed     Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Referral {
  id          String   @id @default(cuid())
  userId      String
  code        String   @unique
  referredId  String?
  clicks      Int      @default(0)
  conversions Int      @default(0)
  earnings    Int      @default(0) // in cents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  referred User? @relation("ReferredBy", fields: [referredId], references: [id])

  @@map("referrals")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  CREATOR
  PRO
  AGENCY
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}